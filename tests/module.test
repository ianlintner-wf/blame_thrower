<?php

class BlameThrowerTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'blame_thrower Example',
      'description' => 'Ensure that the blame_thrower functions properly.',
      'group' => 'Audit',
    );
  }

  public function setUp() {
    parent::setUp('blame_thrower');  // Enable any modules required for the test
    // Create and log in our user. The user has the arbitrary privilege
    // 'extra special edit any simpletest_example' which the code uses
    // to grant access.
    $this->privileged_user = $this->drupalCreateUser(array('create page content'));
    $this->drupalLogin($this->privileged_user);
  }

  // Create a simpletest_example node using the node form
  public function testCreatePage() {
    // Create node to edit.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/blame_thrower', $edit, t('Save'));
    $this->assertText(t('Page Node Type @title has been created.', array('@title' => $edit['title'])));
    $this->assertW
  }


  /**
   * Detect if we're running on PIFR testbot; skip intentional failure in that
   * case. It happens that on the testbot the site under test is in a directory
   * named 'checkout' or 'site_under_test'.
   *
   * @return boolean
   *   TRUE if running on testbot.
   */
  public function runningOnTestbot() {
    return (file_exists("../checkout") || file_exists("../site_under_test"));
  }

  public function checkWatchdogExists($type, $message) {
    $this->messages = array();
    $result = db_query("SELECT * FROM {watchdog} WHERE type = '$type' AND message LIKE '%$message%' ORDER BY timestamp ASC");

    while ($row = db_fetch_object($result)) {
      return true;
    }
    return false;
  }
}

